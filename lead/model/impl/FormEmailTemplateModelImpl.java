package com.erp.lead.model.impl;

import com.erp.lead.model.FormEmailTemplate;
import com.erp.lead.model.FormEmailTemplateModel;
import com.erp.lead.model.FormEmailTemplateSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the FormEmailTemplate service. Represents a row in the &quot;form_email_templates&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.FormEmailTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormEmailTemplateImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Form Email Templates model instance should use the {@link com.erp.lead.model.FormEmailTemplate} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see FormEmailTemplateImpl
 * @see com.erp.lead.model.FormEmailTemplate
 * @see com.erp.lead.model.FormEmailTemplateModel
 * @generated
 */
public class FormEmailTemplateModelImpl extends BaseModelImpl<FormEmailTemplate>
    implements FormEmailTemplateModel {
    public static final String TABLE_NAME = "form_email_templates";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "name", new Integer(Types.VARCHAR) },
            { "subject", new Integer(Types.VARCHAR) },
            { "body", new Integer(Types.VARCHAR) },
            { "send_email_as_customer", new Integer(Types.INTEGER) }
        };
    public static final String TABLE_SQL_CREATE = "create table form_email_templates (id INTEGER not null primary key IDENTITY,name VARCHAR(75) null,subject VARCHAR(75) null,body VARCHAR(75) null,send_email_as_customer INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table form_email_templates";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.erp.lead.model.FormEmailTemplate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.erp.lead.model.FormEmailTemplate"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.erp.lead.model.FormEmailTemplate"));
    private int _id;
    private String _name;
    private String _subject;
    private String _body;
    private int _sendEmailAsCustomer;

    public FormEmailTemplateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static FormEmailTemplate toModel(FormEmailTemplateSoap soapModel) {
        FormEmailTemplate model = new FormEmailTemplateImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setSubject(soapModel.getSubject());
        model.setBody(soapModel.getBody());
        model.setSendEmailAsCustomer(soapModel.getSendEmailAsCustomer());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<FormEmailTemplate> toModels(
        FormEmailTemplateSoap[] soapModels) {
        List<FormEmailTemplate> models = new ArrayList<FormEmailTemplate>(soapModels.length);

        for (FormEmailTemplateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    public void setSubject(String subject) {
        _subject = subject;
    }

    public String getBody() {
        if (_body == null) {
            return StringPool.BLANK;
        } else {
            return _body;
        }
    }

    public void setBody(String body) {
        _body = body;
    }

    public int getSendEmailAsCustomer() {
        return _sendEmailAsCustomer;
    }

    public void setSendEmailAsCustomer(int sendEmailAsCustomer) {
        _sendEmailAsCustomer = sendEmailAsCustomer;
    }

    public FormEmailTemplate toEscapedModel() {
        if (isEscapedModel()) {
            return (FormEmailTemplate) this;
        } else {
            return (FormEmailTemplate) Proxy.newProxyInstance(FormEmailTemplate.class.getClassLoader(),
                new Class[] { FormEmailTemplate.class },
                new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        FormEmailTemplateImpl formEmailTemplateImpl = new FormEmailTemplateImpl();

        formEmailTemplateImpl.setId(getId());

        formEmailTemplateImpl.setName(getName());

        formEmailTemplateImpl.setSubject(getSubject());

        formEmailTemplateImpl.setBody(getBody());

        formEmailTemplateImpl.setSendEmailAsCustomer(getSendEmailAsCustomer());

        return formEmailTemplateImpl;
    }

    public int compareTo(FormEmailTemplate formEmailTemplate) {
        int pk = formEmailTemplate.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        FormEmailTemplate formEmailTemplate = null;

        try {
            formEmailTemplate = (FormEmailTemplate) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = formEmailTemplate.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", body=");
        sb.append(getBody());
        sb.append(", sendEmailAsCustomer=");
        sb.append(getSendEmailAsCustomer());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.FormEmailTemplate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>body</column-name><column-value><![CDATA[");
        sb.append(getBody());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sendEmailAsCustomer</column-name><column-value><![CDATA[");
        sb.append(getSendEmailAsCustomer());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
