package com.erp.lead.model.impl;

import com.erp.lead.model.DemoItem;
import com.erp.lead.model.DemoItemModel;
import com.erp.lead.model.DemoItemSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the DemoItem service. Represents a row in the &quot;demo_items&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.DemoItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DemoItemImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a DemoItem model instance should use the {@link com.erp.lead.model.DemoItem} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see DemoItemImpl
 * @see com.erp.lead.model.DemoItem
 * @see com.erp.lead.model.DemoItemModel
 * @generated
 */
public class DemoItemModelImpl extends BaseModelImpl<DemoItem>
    implements DemoItemModel {
    public static final String TABLE_NAME = "demo_items";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "language_id", new Integer(Types.INTEGER) },
            { "inventory_item_id", new Integer(Types.INTEGER) },
            { "organization_id", new Integer(Types.INTEGER) },
            { "vertical_id", new Integer(Types.INTEGER) },
            { "localization_id", new Integer(Types.INTEGER) }
        };
    public static final String TABLE_SQL_CREATE = "create table demo_items (id INTEGER not null primary key IDENTITY,language_id INTEGER,inventory_item_id INTEGER,organization_id INTEGER,vertical_id INTEGER,localization_id INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table demo_items";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.rosettastone.cis.model.DemoItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.rosettastone.cis.model.DemoItem"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.rosettastone.cis.model.DemoItem"));
    private int _id;
    private int _languageId;
    private int _inventoryItemId;
    private int _organizationId;
    private int _verticalId;
    private int _localizationId;

    public DemoItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DemoItem toModel(DemoItemSoap soapModel) {
        DemoItem model = new DemoItemImpl();

        model.setId(soapModel.getId());
        model.setLanguageId(soapModel.getLanguageId());
        model.setInventoryItemId(soapModel.getInventoryItemId());
        model.setOrganizationId(soapModel.getOrganizationId());
        model.setVerticalId(soapModel.getVerticalId());
        model.setLocalizationId(soapModel.getLocalizationId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DemoItem> toModels(DemoItemSoap[] soapModels) {
        List<DemoItem> models = new ArrayList<DemoItem>(soapModels.length);

        for (DemoItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public int getLanguageId() {
        return _languageId;
    }

    public void setLanguageId(int languageId) {
        _languageId = languageId;
    }

    public int getInventoryItemId() {
        return _inventoryItemId;
    }

    public void setInventoryItemId(int inventoryItemId) {
        _inventoryItemId = inventoryItemId;
    }

    public int getOrganizationId() {
        return _organizationId;
    }

    public void setOrganizationId(int organizationId) {
        _organizationId = organizationId;
    }

    public int getVerticalId() {
        return _verticalId;
    }

    public void setVerticalId(int verticalId) {
        _verticalId = verticalId;
    }

    public int getLocalizationId() {
        return _localizationId;
    }

    public void setLocalizationId(int localizationId) {
        _localizationId = localizationId;
    }

    public DemoItem toEscapedModel() {
        if (isEscapedModel()) {
            return (DemoItem) this;
        } else {
            return (DemoItem) Proxy.newProxyInstance(DemoItem.class.getClassLoader(),
                new Class[] { DemoItem.class }, new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        DemoItemImpl demoItemImpl = new DemoItemImpl();

        demoItemImpl.setId(getId());

        demoItemImpl.setLanguageId(getLanguageId());

        demoItemImpl.setInventoryItemId(getInventoryItemId());

        demoItemImpl.setOrganizationId(getOrganizationId());

        demoItemImpl.setVerticalId(getVerticalId());

        demoItemImpl.setLocalizationId(getLocalizationId());

        return demoItemImpl;
    }

    public int compareTo(DemoItem demoItem) {
        int pk = demoItem.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        DemoItem demoItem = null;

        try {
            demoItem = (DemoItem) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = demoItem.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", languageId=");
        sb.append(getLanguageId());
        sb.append(", inventoryItemId=");
        sb.append(getInventoryItemId());
        sb.append(", organizationId=");
        sb.append(getOrganizationId());
        sb.append(", verticalId=");
        sb.append(getVerticalId());
        sb.append(", localizationId=");
        sb.append(getLocalizationId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.DemoItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>languageId</column-name><column-value><![CDATA[");
        sb.append(getLanguageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryItemId</column-name><column-value><![CDATA[");
        sb.append(getInventoryItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationId</column-name><column-value><![CDATA[");
        sb.append(getOrganizationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verticalId</column-name><column-value><![CDATA[");
        sb.append(getVerticalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>localizationId</column-name><column-value><![CDATA[");
        sb.append(getLocalizationId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
