package com.erp.lead.model.impl;

import com.erp.lead.model.FormExportLog;
import com.erp.lead.model.FormExportLogModel;
import com.erp.lead.model.FormExportLogSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the FormExportLog service. Represents a row in the &quot;form_export_logs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.FormExportLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormExportLogImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Form Export Logs model instance should use the {@link com.erp.lead.model.FormExportLog} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see FormExportLogImpl
 * @see com.erp.lead.model.FormExportLog
 * @see com.erp.lead.model.FormExportLogModel
 * @generated
 */
public class FormExportLogModelImpl extends BaseModelImpl<FormExportLog>
    implements FormExportLogModel {
    public static final String TABLE_NAME = "form_export_logs";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "form_entry_id", new Integer(Types.INTEGER) },
            { "exporter", new Integer(Types.VARCHAR) },
            { "successful", new Integer(Types.INTEGER) },
            { "external_id", new Integer(Types.VARCHAR) },
            { "created_at", new Integer(Types.TIMESTAMP) },
            { "text", new Integer(Types.VARCHAR) }
        };
    public static final String TABLE_SQL_CREATE = "create table form_export_logs (id INTEGER not null primary key IDENTITY,form_entry_id INTEGER,exporter VARCHAR(75) null,successful INTEGER,external_id VARCHAR(75) null,created_at DATE null,text VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table form_export_logs";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.rosettastone.cis.model.FormExportLog"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.rosettastone.cis.model.FormExportLog"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.rosettastone.cis.model.FormExportLog"));
    private int _id;
    private int _formEntryId;
    private String _exporter;
    private int _successful;
    private String _externalId;
    private Date _createdAt;
    private String _text;

    public FormExportLogModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static FormExportLog toModel(FormExportLogSoap soapModel) {
        FormExportLog model = new FormExportLogImpl();

        model.setId(soapModel.getId());
        model.setFormEntryId(soapModel.getFormEntryId());
        model.setExporter(soapModel.getExporter());
        model.setSuccessful(soapModel.getSuccessful());
        model.setExternalId(soapModel.getExternalId());
        model.setCreatedAt(soapModel.getCreatedAt());
        model.setText(soapModel.getText());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<FormExportLog> toModels(FormExportLogSoap[] soapModels) {
        List<FormExportLog> models = new ArrayList<FormExportLog>(soapModels.length);

        for (FormExportLogSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public int getFormEntryId() {
        return _formEntryId;
    }

    public void setFormEntryId(int formEntryId) {
        _formEntryId = formEntryId;
    }

    public String getExporter() {
        if (_exporter == null) {
            return StringPool.BLANK;
        } else {
            return _exporter;
        }
    }

    public void setExporter(String exporter) {
        _exporter = exporter;
    }

    public int getSuccessful() {
        return _successful;
    }

    public void setSuccessful(int successful) {
        _successful = successful;
    }

    public String getExternalId() {
        if (_externalId == null) {
            return StringPool.BLANK;
        } else {
            return _externalId;
        }
    }

    public void setExternalId(String externalId) {
        _externalId = externalId;
    }

    public Date getCreatedAt() {
        return _createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        _createdAt = createdAt;
    }

    public String getText() {
        if (_text == null) {
            return StringPool.BLANK;
        } else {
            return _text;
        }
    }

    public void setText(String text) {
        _text = text;
    }

    public FormExportLog toEscapedModel() {
        if (isEscapedModel()) {
            return (FormExportLog) this;
        } else {
            return (FormExportLog) Proxy.newProxyInstance(FormExportLog.class.getClassLoader(),
                new Class[] { FormExportLog.class },
                new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        FormExportLogImpl formExportLogImpl = new FormExportLogImpl();

        formExportLogImpl.setId(getId());

        formExportLogImpl.setFormEntryId(getFormEntryId());

        formExportLogImpl.setExporter(getExporter());

        formExportLogImpl.setSuccessful(getSuccessful());

        formExportLogImpl.setExternalId(getExternalId());

        formExportLogImpl.setCreatedAt(getCreatedAt());

        formExportLogImpl.setText(getText());

        return formExportLogImpl;
    }

    public int compareTo(FormExportLog formExportLog) {
        int pk = formExportLog.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        FormExportLog formExportLog = null;

        try {
            formExportLog = (FormExportLog) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = formExportLog.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", formEntryId=");
        sb.append(getFormEntryId());
        sb.append(", exporter=");
        sb.append(getExporter());
        sb.append(", successful=");
        sb.append(getSuccessful());
        sb.append(", externalId=");
        sb.append(getExternalId());
        sb.append(", createdAt=");
        sb.append(getCreatedAt());
        sb.append(", text=");
        sb.append(getText());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.FormExportLog");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formEntryId</column-name><column-value><![CDATA[");
        sb.append(getFormEntryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>exporter</column-name><column-value><![CDATA[");
        sb.append(getExporter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>successful</column-name><column-value><![CDATA[");
        sb.append(getSuccessful());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>externalId</column-name><column-value><![CDATA[");
        sb.append(getExternalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdAt</column-name><column-value><![CDATA[");
        sb.append(getCreatedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>text</column-name><column-value><![CDATA[");
        sb.append(getText());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
