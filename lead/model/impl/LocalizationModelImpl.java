package com.erp.lead.model.impl;

import com.erp.lead.model.Localization;
import com.erp.lead.model.LocalizationModel;
import com.erp.lead.model.LocalizationSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Localization service. Represents a row in the &quot;segments&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.LocalizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocalizationImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Localization model instance should use the {@link com.erp.lead.model.Localization} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see LocalizationImpl
 * @see com.erp.lead.model.Localization
 * @see com.erp.lead.model.LocalizationModel
 * @generated
 */
public class LocalizationModelImpl extends BaseModelImpl<Localization>
    implements LocalizationModel {
    public static final String TABLE_NAME = "segments";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "code", new Integer(Types.VARCHAR) },
            { "type", new Integer(Types.VARCHAR) },
            { "description", new Integer(Types.VARCHAR) },
            { "structure_id", new Integer(Types.INTEGER) }
        };
    public static final String TABLE_SQL_CREATE = "create table segments (id INTEGER not null primary key IDENTITY,code VARCHAR(75) null,type VARCHAR(75) null,description VARCHAR(75) null,structure_id INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table segments";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.erp.lead.model.Localization"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.erp.lead.model.Localization"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.erp.lead.model.Localization"));
    private int _id;
    private String _code;
    private String _type;
    private String _description;
    private int _structureId;

    public LocalizationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Localization toModel(LocalizationSoap soapModel) {
        Localization model = new LocalizationImpl();

        model.setId(soapModel.getId());
        model.setCode(soapModel.getCode());
        model.setType(soapModel.getType());
        model.setDescription(soapModel.getDescription());
        model.setStructureId(soapModel.getStructureId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Localization> toModels(LocalizationSoap[] soapModels) {
        List<Localization> models = new ArrayList<Localization>(soapModels.length);

        for (LocalizationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    public void setCode(String code) {
        _code = code;
    }

    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    public void setType(String type) {
        _type = type;
    }

    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    public int getStructureId() {
        return _structureId;
    }

    public void setStructureId(int structureId) {
        _structureId = structureId;
    }

    public Localization toEscapedModel() {
        if (isEscapedModel()) {
            return (Localization) this;
        } else {
            return (Localization) Proxy.newProxyInstance(Localization.class.getClassLoader(),
                new Class[] { Localization.class },
                new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        LocalizationImpl localizationImpl = new LocalizationImpl();

        localizationImpl.setId(getId());

        localizationImpl.setCode(getCode());

        localizationImpl.setType(getType());

        localizationImpl.setDescription(getDescription());

        localizationImpl.setStructureId(getStructureId());

        return localizationImpl;
    }

    public int compareTo(Localization localization) {
        int pk = localization.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Localization localization = null;

        try {
            localization = (Localization) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = localization.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", structureId=");
        sb.append(getStructureId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.Localization");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>structureId</column-name><column-value><![CDATA[");
        sb.append(getStructureId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
