package com.erp.lead.model.impl;

import com.erp.lead.model.FormEntry;
import com.erp.lead.model.FormEntryModel;
import com.erp.lead.model.FormEntrySoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the FormEntry service. Represents a row in the &quot;form_entries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.FormEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormEntryImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Form Entry model instance should use the {@link com.erp.lead.model.FormEntry} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see FormEntryImpl
 * @see com.erp.lead.model.FormEntry
 * @see com.erp.lead.model.FormEntryModel
 * @generated
 */
public class FormEntryModelImpl extends BaseModelImpl<FormEntry>
    implements FormEntryModel {
    public static final String TABLE_NAME = "form_entries";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "form_id", new Integer(Types.INTEGER) },
            { "form_url", new Integer(Types.VARCHAR) },
            { "created_at", new Integer(Types.TIMESTAMP) },
            { "updated_at", new Integer(Types.TIMESTAMP) }
        };
    public static final String TABLE_SQL_CREATE = "create table form_entries (id INTEGER not null primary key IDENTITY,form_id INTEGER,form_url VARCHAR(75) null,created_at DATE null,updated_at DATE null)";
    public static final String TABLE_SQL_DROP = "drop table form_entries";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.rosettastone.cis.model.FormEntry"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.rosettastone.cis.model.FormEntry"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.rosettastone.cis.model.FormEntry"));
    private int _id;
    private int _formId;
    private String _formUrl;
    private Date _createdAt;
    private Date _updatedAt;

    public FormEntryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static FormEntry toModel(FormEntrySoap soapModel) {
        FormEntry model = new FormEntryImpl();

        model.setId(soapModel.getId());
        model.setFormId(soapModel.getFormId());
        model.setFormUrl(soapModel.getFormUrl());
        model.setCreatedAt(soapModel.getCreatedAt());
        model.setUpdatedAt(soapModel.getUpdatedAt());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<FormEntry> toModels(FormEntrySoap[] soapModels) {
        List<FormEntry> models = new ArrayList<FormEntry>(soapModels.length);

        for (FormEntrySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public int getFormId() {
        return _formId;
    }

    public void setFormId(int formId) {
        _formId = formId;
    }

    public String getFormUrl() {
        if (_formUrl == null) {
            return StringPool.BLANK;
        } else {
            return _formUrl;
        }
    }

    public void setFormUrl(String formUrl) {
        _formUrl = formUrl;
    }

    public Date getCreatedAt() {
        return _createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        _createdAt = createdAt;
    }

    public Date getUpdatedAt() {
        return _updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        _updatedAt = updatedAt;
    }

    public FormEntry toEscapedModel() {
        if (isEscapedModel()) {
            return (FormEntry) this;
        } else {
            return (FormEntry) Proxy.newProxyInstance(FormEntry.class.getClassLoader(),
                new Class[] { FormEntry.class }, new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        FormEntryImpl formEntryImpl = new FormEntryImpl();

        formEntryImpl.setId(getId());

        formEntryImpl.setFormId(getFormId());

        formEntryImpl.setFormUrl(getFormUrl());

        formEntryImpl.setCreatedAt(getCreatedAt());

        formEntryImpl.setUpdatedAt(getUpdatedAt());

        return formEntryImpl;
    }

    public int compareTo(FormEntry formEntry) {
        int pk = formEntry.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        FormEntry formEntry = null;

        try {
            formEntry = (FormEntry) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = formEntry.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", formId=");
        sb.append(getFormId());
        sb.append(", formUrl=");
        sb.append(getFormUrl());
        sb.append(", createdAt=");
        sb.append(getCreatedAt());
        sb.append(", updatedAt=");
        sb.append(getUpdatedAt());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.FormEntry");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formId</column-name><column-value><![CDATA[");
        sb.append(getFormId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formUrl</column-name><column-value><![CDATA[");
        sb.append(getFormUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdAt</column-name><column-value><![CDATA[");
        sb.append(getCreatedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updatedAt</column-name><column-value><![CDATA[");
        sb.append(getUpdatedAt());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
