package com.erp.lead.model.impl;

import com.erp.lead.model.Country;
import com.erp.lead.model.CountryModel;
import com.erp.lead.model.CountrySoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Country service. Represents a row in the &quot;countries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.CountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CountryImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Country model instance should use the {@link com.erp.lead.model.Country} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see CountryImpl
 * @see com.erp.lead.model.Country
 * @see com.erp.lead.model.CountryModel
 * @generated
 */
public class CountryModelImpl extends BaseModelImpl<Country>
    implements CountryModel {
    public static final String TABLE_NAME = "countries";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.VARCHAR) },
            { "code", new Integer(Types.VARCHAR) },
            { "description_en", new Integer(Types.VARCHAR) },
            { "region", new Integer(Types.VARCHAR) },
            { "iso_numeric_code", new Integer(Types.VARCHAR) },
            { "eu_code", new Integer(Types.VARCHAR) },
            { "active", new Integer(Types.INTEGER) },
            { "denied", new Integer(Types.INTEGER) },
            { "restricted", new Integer(Types.INTEGER) },
            { "organization_id", new Integer(Types.INTEGER) },
            { "default_currency_id", new Integer(Types.INTEGER) },
            { "why_inactive", new Integer(Types.VARCHAR) }
        };
    public static final String TABLE_SQL_CREATE = "create table countries (id VARCHAR(75) not null primary key IDENTITY,code VARCHAR(75) null,description_en VARCHAR(75) null,region VARCHAR(75) null,iso_numeric_code VARCHAR(75) null,eu_code VARCHAR(75) null,active INTEGER,denied INTEGER,restricted INTEGER,organization_id INTEGER,default_currency_id INTEGER,why_inactive VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table countries";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.erp.lead.model.Country"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.erp.lead.model.Country"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.erp.lead.model.Country"));
    private String _id;
    private String _code;
    private String _descriptionEn;
    private String _region;
    private String _isoNumericCode;
    private String _euCode;
    private int _active;
    private int _denied;
    private int _restricted;
    private int _organizationId;
    private int _defaultCurrencyId;
    private String _whyInactive;

    public CountryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Country toModel(CountrySoap soapModel) {
        Country model = new CountryImpl();

        model.setId(soapModel.getId());
        model.setCode(soapModel.getCode());
        model.setDescriptionEn(soapModel.getDescriptionEn());
        model.setRegion(soapModel.getRegion());
        model.setIsoNumericCode(soapModel.getIsoNumericCode());
        model.setEuCode(soapModel.getEuCode());
        model.setActive(soapModel.getActive());
        model.setDenied(soapModel.getDenied());
        model.setRestricted(soapModel.getRestricted());
        model.setOrganizationId(soapModel.getOrganizationId());
        model.setDefaultCurrencyId(soapModel.getDefaultCurrencyId());
        model.setWhyInactive(soapModel.getWhyInactive());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Country> toModels(CountrySoap[] soapModels) {
        List<Country> models = new ArrayList<Country>(soapModels.length);

        for (CountrySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public String getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(String pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    public String getId() {
        if (_id == null) {
            return StringPool.BLANK;
        } else {
            return _id;
        }
    }

    public void setId(String id) {
        _id = id;
    }

    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    public void setCode(String code) {
        _code = code;
    }

    public String getDescriptionEn() {
        if (_descriptionEn == null) {
            return StringPool.BLANK;
        } else {
            return _descriptionEn;
        }
    }

    public void setDescriptionEn(String descriptionEn) {
        _descriptionEn = descriptionEn;
    }

    public String getRegion() {
        if (_region == null) {
            return StringPool.BLANK;
        } else {
            return _region;
        }
    }

    public void setRegion(String region) {
        _region = region;
    }

    public String getIsoNumericCode() {
        if (_isoNumericCode == null) {
            return StringPool.BLANK;
        } else {
            return _isoNumericCode;
        }
    }

    public void setIsoNumericCode(String isoNumericCode) {
        _isoNumericCode = isoNumericCode;
    }

    public String getEuCode() {
        if (_euCode == null) {
            return StringPool.BLANK;
        } else {
            return _euCode;
        }
    }

    public void setEuCode(String euCode) {
        _euCode = euCode;
    }

    public int getActive() {
        return _active;
    }

    public void setActive(int active) {
        _active = active;
    }

    public int getDenied() {
        return _denied;
    }

    public void setDenied(int denied) {
        _denied = denied;
    }

    public int getRestricted() {
        return _restricted;
    }

    public void setRestricted(int restricted) {
        _restricted = restricted;
    }

    public int getOrganizationId() {
        return _organizationId;
    }

    public void setOrganizationId(int organizationId) {
        _organizationId = organizationId;
    }

    public int getDefaultCurrencyId() {
        return _defaultCurrencyId;
    }

    public void setDefaultCurrencyId(int defaultCurrencyId) {
        _defaultCurrencyId = defaultCurrencyId;
    }

    public String getWhyInactive() {
        if (_whyInactive == null) {
            return StringPool.BLANK;
        } else {
            return _whyInactive;
        }
    }

    public void setWhyInactive(String whyInactive) {
        _whyInactive = whyInactive;
    }

    public Country toEscapedModel() {
        if (isEscapedModel()) {
            return (Country) this;
        } else {
            return (Country) Proxy.newProxyInstance(Country.class.getClassLoader(),
                new Class[] { Country.class }, new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        CountryImpl countryImpl = new CountryImpl();

        countryImpl.setId(getId());

        countryImpl.setCode(getCode());

        countryImpl.setDescriptionEn(getDescriptionEn());

        countryImpl.setRegion(getRegion());

        countryImpl.setIsoNumericCode(getIsoNumericCode());

        countryImpl.setEuCode(getEuCode());

        countryImpl.setActive(getActive());

        countryImpl.setDenied(getDenied());

        countryImpl.setRestricted(getRestricted());

        countryImpl.setOrganizationId(getOrganizationId());

        countryImpl.setDefaultCurrencyId(getDefaultCurrencyId());

        countryImpl.setWhyInactive(getWhyInactive());

        return countryImpl;
    }

    public int compareTo(Country country) {
        String pk = country.getPrimaryKey();

        return getPrimaryKey().compareTo(pk);
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Country country = null;

        try {
            country = (Country) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        String pk = country.getPrimaryKey();

        if (getPrimaryKey().equals(pk)) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", descriptionEn=");
        sb.append(getDescriptionEn());
        sb.append(", region=");
        sb.append(getRegion());
        sb.append(", isoNumericCode=");
        sb.append(getIsoNumericCode());
        sb.append(", euCode=");
        sb.append(getEuCode());
        sb.append(", active=");
        sb.append(getActive());
        sb.append(", denied=");
        sb.append(getDenied());
        sb.append(", restricted=");
        sb.append(getRestricted());
        sb.append(", organizationId=");
        sb.append(getOrganizationId());
        sb.append(", defaultCurrencyId=");
        sb.append(getDefaultCurrencyId());
        sb.append(", whyInactive=");
        sb.append(getWhyInactive());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.Country");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptionEn</column-name><column-value><![CDATA[");
        sb.append(getDescriptionEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>region</column-name><column-value><![CDATA[");
        sb.append(getRegion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isoNumericCode</column-name><column-value><![CDATA[");
        sb.append(getIsoNumericCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>euCode</column-name><column-value><![CDATA[");
        sb.append(getEuCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active</column-name><column-value><![CDATA[");
        sb.append(getActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>denied</column-name><column-value><![CDATA[");
        sb.append(getDenied());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>restricted</column-name><column-value><![CDATA[");
        sb.append(getRestricted());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationId</column-name><column-value><![CDATA[");
        sb.append(getOrganizationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultCurrencyId</column-name><column-value><![CDATA[");
        sb.append(getDefaultCurrencyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>whyInactive</column-name><column-value><![CDATA[");
        sb.append(getWhyInactive());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
