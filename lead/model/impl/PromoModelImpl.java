package com.erp.lead.model.impl;

import com.erp.lead.model.Promo;
import com.erp.lead.model.PromoModel;
import com.erp.lead.model.PromoSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Promo service. Represents a row in the &quot;promos&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.PromoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PromoImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Promo model instance should use the {@link com.erp.lead.model.Promo} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see PromoImpl
 * @see com.erp.lead.model.Promo
 * @see com.erp.lead.model.PromoModel
 * @generated
 */
public class PromoModelImpl extends BaseModelImpl<Promo> implements PromoModel {
    public static final String TABLE_NAME = "promos";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "code", new Integer(Types.VARCHAR) },
            { "description_en", new Integer(Types.VARCHAR) },
            { "currency_id", new Integer(Types.INTEGER) },
            { "active", new Integer(Types.INTEGER) },
            { "automatic", new Integer(Types.INTEGER) },
            { "allow_in_hs_store", new Integer(Types.INTEGER) },
            { "allow_in_ind_store", new Integer(Types.INTEGER) },
            { "generic_lead", new Integer(Types.VARCHAR) },
            { "specific_lead", new Integer(Types.VARCHAR) },
            { "end_date", new Integer(Types.TIMESTAMP) },
            { "start_date", new Integer(Types.TIMESTAMP) }
        };
    public static final String TABLE_SQL_CREATE = "create table promos (id INTEGER not null primary key IDENTITY,code VARCHAR(75) null,description_en VARCHAR(75) null,currency_id INTEGER,active INTEGER,automatic INTEGER,allow_in_hs_store INTEGER,allow_in_ind_store INTEGER,generic_lead VARCHAR(75) null,specific_lead VARCHAR(75) null,end_date DATE null,start_date DATE null)";
    public static final String TABLE_SQL_DROP = "drop table promos";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.rosettastone.cis.model.Promo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.rosettastone.cis.model.Promo"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.rosettastone.cis.model.Promo"));
    private int _id;
    private String _code;
    private String _descriptionEn;
    private int _currencyId;
    private int _active;
    private int _automatic;
    private int _AllowInHSStore;
    private int _AllowInINDStore;
    private String _genericLead;
    private String _specificLead;
    private Date _endDate;
    private Date _startDate;

    public PromoModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Promo toModel(PromoSoap soapModel) {
        Promo model = new PromoImpl();

        model.setId(soapModel.getId());
        model.setCode(soapModel.getCode());
        model.setDescriptionEn(soapModel.getDescriptionEn());
        model.setCurrencyId(soapModel.getCurrencyId());
        model.setActive(soapModel.getActive());
        model.setAutomatic(soapModel.getAutomatic());
        model.setAllowInHSStore(soapModel.getAllowInHSStore());
        model.setAllowInINDStore(soapModel.getAllowInINDStore());
        model.setGenericLead(soapModel.getGenericLead());
        model.setSpecificLead(soapModel.getSpecificLead());
        model.setEndDate(soapModel.getEndDate());
        model.setStartDate(soapModel.getStartDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Promo> toModels(PromoSoap[] soapModels) {
        List<Promo> models = new ArrayList<Promo>(soapModels.length);

        for (PromoSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    public void setCode(String code) {
        _code = code;
    }

    public String getDescriptionEn() {
        if (_descriptionEn == null) {
            return StringPool.BLANK;
        } else {
            return _descriptionEn;
        }
    }

    public void setDescriptionEn(String descriptionEn) {
        _descriptionEn = descriptionEn;
    }

    public int getCurrencyId() {
        return _currencyId;
    }

    public void setCurrencyId(int currencyId) {
        _currencyId = currencyId;
    }

    public int getActive() {
        return _active;
    }

    public void setActive(int active) {
        _active = active;
    }

    public int getAutomatic() {
        return _automatic;
    }

    public void setAutomatic(int automatic) {
        _automatic = automatic;
    }

    public int getAllowInHSStore() {
        return _AllowInHSStore;
    }

    public void setAllowInHSStore(int AllowInHSStore) {
        _AllowInHSStore = AllowInHSStore;
    }

    public int getAllowInINDStore() {
        return _AllowInINDStore;
    }

    public void setAllowInINDStore(int AllowInINDStore) {
        _AllowInINDStore = AllowInINDStore;
    }

    public String getGenericLead() {
        if (_genericLead == null) {
            return StringPool.BLANK;
        } else {
            return _genericLead;
        }
    }

    public void setGenericLead(String genericLead) {
        _genericLead = genericLead;
    }

    public String getSpecificLead() {
        if (_specificLead == null) {
            return StringPool.BLANK;
        } else {
            return _specificLead;
        }
    }

    public void setSpecificLead(String specificLead) {
        _specificLead = specificLead;
    }

    public Date getEndDate() {
        return _endDate;
    }

    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    public Date getStartDate() {
        return _startDate;
    }

    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    public Promo toEscapedModel() {
        if (isEscapedModel()) {
            return (Promo) this;
        } else {
            return (Promo) Proxy.newProxyInstance(Promo.class.getClassLoader(),
                new Class[] { Promo.class }, new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        PromoImpl promoImpl = new PromoImpl();

        promoImpl.setId(getId());

        promoImpl.setCode(getCode());

        promoImpl.setDescriptionEn(getDescriptionEn());

        promoImpl.setCurrencyId(getCurrencyId());

        promoImpl.setActive(getActive());

        promoImpl.setAutomatic(getAutomatic());

        promoImpl.setAllowInHSStore(getAllowInHSStore());

        promoImpl.setAllowInINDStore(getAllowInINDStore());

        promoImpl.setGenericLead(getGenericLead());

        promoImpl.setSpecificLead(getSpecificLead());

        promoImpl.setEndDate(getEndDate());

        promoImpl.setStartDate(getStartDate());

        return promoImpl;
    }

    public int compareTo(Promo promo) {
        int pk = promo.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Promo promo = null;

        try {
            promo = (Promo) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = promo.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", descriptionEn=");
        sb.append(getDescriptionEn());
        sb.append(", currencyId=");
        sb.append(getCurrencyId());
        sb.append(", active=");
        sb.append(getActive());
        sb.append(", automatic=");
        sb.append(getAutomatic());
        sb.append(", AllowInHSStore=");
        sb.append(getAllowInHSStore());
        sb.append(", AllowInINDStore=");
        sb.append(getAllowInINDStore());
        sb.append(", genericLead=");
        sb.append(getGenericLead());
        sb.append(", specificLead=");
        sb.append(getSpecificLead());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.Promo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptionEn</column-name><column-value><![CDATA[");
        sb.append(getDescriptionEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currencyId</column-name><column-value><![CDATA[");
        sb.append(getCurrencyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active</column-name><column-value><![CDATA[");
        sb.append(getActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>automatic</column-name><column-value><![CDATA[");
        sb.append(getAutomatic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>AllowInHSStore</column-name><column-value><![CDATA[");
        sb.append(getAllowInHSStore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>AllowInINDStore</column-name><column-value><![CDATA[");
        sb.append(getAllowInINDStore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>genericLead</column-name><column-value><![CDATA[");
        sb.append(getGenericLead());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specificLead</column-name><column-value><![CDATA[");
        sb.append(getSpecificLead());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
