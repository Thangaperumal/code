package com.erp.lead.model.impl;

import com.erp.lead.model.Order;
import com.erp.lead.model.OrderModel;
import com.erp.lead.model.OrderSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Order service. Represents a row in the &quot;orders&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.erp.lead.model.OrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrderImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a Order model instance should use the {@link com.erp.lead.model.Order} interface instead.
 * </p>
 *
 * @author Thangaperumal
 * @see OrderImpl
 * @see com.erp.lead.model.Order
 * @see com.erp.lead.model.OrderModel
 * @generated
 */
public class OrderModelImpl extends BaseModelImpl<Order> implements OrderModel {
    public static final String TABLE_NAME = "orders";
    public static final Object[][] TABLE_COLUMNS = {
            { "id", new Integer(Types.INTEGER) },
            { "order_number", new Integer(Types.INTEGER) },
            { "customer_id", new Integer(Types.INTEGER) },
            { "ship_method_id", new Integer(Types.INTEGER) },
            { "promo_id", new Integer(Types.INTEGER) },
            { "ship_address_id", new Integer(Types.INTEGER) },
            { "bill_address_id", new Integer(Types.INTEGER) },
            { "credit_card_id", new Integer(Types.INTEGER) },
            { "certitax_trxn_id", new Integer(Types.VARCHAR) },
            { "currency_id", new Integer(Types.INTEGER) },
            { "subtotal", new Integer(Types.DOUBLE) },
            { "subtotal_vat", new Integer(Types.DOUBLE) },
            { "shipping", new Integer(Types.DOUBLE) },
            { "tax", new Integer(Types.DOUBLE) },
            { "total", new Integer(Types.DOUBLE) },
            { "no_signature_required", new Integer(Types.INTEGER) },
            { "credit_card_approval_code", new Integer(Types.VARCHAR) },
            { "credit_card_retries", new Integer(Types.INTEGER) },
            { "organization_id", new Integer(Types.INTEGER) },
            { "form_where_entered", new Integer(Types.VARCHAR) },
            { "vertical", new Integer(Types.VARCHAR) },
            { "vat_estimation_country_code", new Integer(Types.VARCHAR) },
            { "created_at", new Integer(Types.TIMESTAMP) },
            { "updated_at", new Integer(Types.TIMESTAMP) },
            { "ordered_date", new Integer(Types.TIMESTAMP) },
            { "salesrep_id", new Integer(Types.INTEGER) },
            { "site_id", new Integer(Types.INTEGER) },
            { "shipping_header_amount", new Integer(Types.DOUBLE) },
            { "payments", new Integer(Types.INTEGER) },
            { "wire_transfer_id", new Integer(Types.INTEGER) },
            { "show_no_costs_on_slip", new Integer(Types.INTEGER) },
            { "shipping_instructions", new Integer(Types.VARCHAR) },
            { "bisextorderid", new Integer(Types.INTEGER) },
            { "language_of_interest", new Integer(Types.VARCHAR) },
            { "ec_order_id", new Integer(Types.INTEGER) },
            { "gift_msg", new Integer(Types.VARCHAR) },
            { "paypal_transaction_id", new Integer(Types.VARCHAR) },
            { "billing_agreement_id", new Integer(Types.VARCHAR) },
            { "check_or_mo", new Integer(Types.VARCHAR) },
            { "packing_instructions", new Integer(Types.VARCHAR) },
            { "complimentary", new Integer(Types.INTEGER) },
            { "ready_for_export", new Integer(Types.INTEGER) },
            { "bisextproofxml", new Integer(Types.VARCHAR) },
            { "maestro_3d_secure", new Integer(Types.INTEGER) },
            { "bisextcustomerip", new Integer(Types.VARCHAR) },
            { "bisextcvvresult", new Integer(Types.VARCHAR) },
            { "bisextavsresult", new Integer(Types.VARCHAR) },
            { "order_notes", new Integer(Types.VARCHAR) },
            { "bisextfraudresult", new Integer(Types.VARCHAR) },
            { "bisextfraudcode", new Integer(Types.VARCHAR) },
            { "po_number", new Integer(Types.VARCHAR) },
            { "payment_type", new Integer(Types.VARCHAR) },
            { "drop_ship", new Integer(Types.INTEGER) },
            { "customer_number", new Integer(Types.VARCHAR) },
            { "repeat_customer", new Integer(Types.INTEGER) },
            { "bisextattemptid", new Integer(Types.INTEGER) },
            { "bisextpaymentproductid", new Integer(Types.INTEGER) },
            { "direct_debit_id", new Integer(Types.INTEGER) },
            { "bisstoreid", new Integer(Types.INTEGER) },
            { "bisextpaymentmethodid", new Integer(Types.INTEGER) },
            { "bisextstatusid", new Integer(Types.INTEGER) },
            { "bisextamount", new Integer(Types.INTEGER) },
            { "rtbt_id", new Integer(Types.INTEGER) },
            { "payment_term_id", new Integer(Types.INTEGER) },
            { "unauthorised_order", new Integer(Types.INTEGER) },
            { "ams_status", new Integer(Types.VARCHAR) },
            { "address_override", new Integer(Types.INTEGER) },
            { "bill_same_as_ship", new Integer(Types.INTEGER) },
            { "master_guid", new Integer(Types.VARCHAR) },
            { "save_credit_card", new Integer(Types.INTEGER) },
            { "price_list_id", new Integer(Types.INTEGER) },
            { "bisvendor", new Integer(Types.VARCHAR) },
            { "bisaddref", new Integer(Types.VARCHAR) },
            { "bisexteffortid", new Integer(Types.INTEGER) },
            { "bisextpaymentreference", new Integer(Types.INTEGER) },
            { "kcp_response_id", new Integer(Types.INTEGER) },
            { "promo_offer", new Integer(Types.VARCHAR) },
            { "inst_customer", new Integer(Types.VARCHAR) },
            { "partner_guid", new Integer(Types.VARCHAR) },
            { "startDate", new Integer(Types.TIMESTAMP) },
            { "endDate", new Integer(Types.TIMESTAMP) }
        };
    public static final String TABLE_SQL_CREATE = "create table orders (id INTEGER not null primary key IDENTITY,order_number INTEGER,customer_id INTEGER,ship_method_id INTEGER,promo_id INTEGER,ship_address_id INTEGER,bill_address_id INTEGER,credit_card_id INTEGER,certitax_trxn_id VARCHAR(75) null,currency_id INTEGER,subtotal DOUBLE,subtotal_vat DOUBLE,shipping DOUBLE,tax DOUBLE,total DOUBLE,no_signature_required INTEGER,credit_card_approval_code VARCHAR(75) null,credit_card_retries INTEGER,organization_id INTEGER,form_where_entered VARCHAR(75) null,vertical VARCHAR(75) null,vat_estimation_country_code VARCHAR(75) null,created_at DATE null,updated_at DATE null,ordered_date DATE null,salesrep_id INTEGER,site_id INTEGER,shipping_header_amount DOUBLE,payments INTEGER,wire_transfer_id INTEGER,show_no_costs_on_slip INTEGER,shipping_instructions VARCHAR(75) null,bisextorderid INTEGER,language_of_interest VARCHAR(75) null,ec_order_id INTEGER,gift_msg VARCHAR(75) null,paypal_transaction_id VARCHAR(75) null,billing_agreement_id VARCHAR(75) null,check_or_mo VARCHAR(75) null,packing_instructions VARCHAR(75) null,complimentary INTEGER,ready_for_export INTEGER,bisextproofxml VARCHAR(75) null,maestro_3d_secure INTEGER,bisextcustomerip VARCHAR(75) null,bisextcvvresult VARCHAR(75) null,bisextavsresult VARCHAR(75) null,order_notes VARCHAR(75) null,bisextfraudresult VARCHAR(75) null,bisextfraudcode VARCHAR(75) null,po_number VARCHAR(75) null,payment_type VARCHAR(75) null,drop_ship INTEGER,customer_number VARCHAR(75) null,repeat_customer INTEGER,bisextattemptid INTEGER,bisextpaymentproductid INTEGER,direct_debit_id INTEGER,bisstoreid INTEGER,bisextpaymentmethodid INTEGER,bisextstatusid INTEGER,bisextamount INTEGER,rtbt_id INTEGER,payment_term_id INTEGER,unauthorised_order INTEGER,ams_status VARCHAR(75) null,address_override INTEGER,bill_same_as_ship INTEGER,master_guid VARCHAR(75) null,save_credit_card INTEGER,price_list_id INTEGER,bisvendor VARCHAR(75) null,bisaddref VARCHAR(75) null,bisexteffortid INTEGER,bisextpaymentreference INTEGER,kcp_response_id INTEGER,promo_offer VARCHAR(75) null,inst_customer VARCHAR(75) null,partner_guid VARCHAR(75) null,startDate DATE null,endDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table orders";
    public static final String DATA_SOURCE = "cisDS";
    public static final String SESSION_FACTORY = "cisSessionFactory";
    public static final String TX_MANAGER = "cisTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.erp.lead.model.Order"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.erp.lead.model.Order"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.erp.lead.model.Order"));
    private int _id;
    private int _orderNumber;
    private int _customerId;
    private int _shipMethodId;
    private int _promoId;
    private int _shipAddressId;
    private int _billAddressId;
    private int _creditCardId;
    private String _certitaxTrxnId;
    private int _currencyId;
    private double _subtotal;
    private double _subtotalVat;
    private double _shipping;
    private double _tax;
    private double _total;
    private int _noSignatureRequired;
    private String _creditCardApprovalCode;
    private int _creditCardRetries;
    private int _organizationId;
    private String _formWhereEntered;
    private String _vertical;
    private String _vatEstimationCountryCode;
    private Date _createdAt;
    private Date _updatedAt;
    private Date _orderedDate;
    private int _salesrepId;
    private int _siteId;
    private double _shippingHeaderAmount;
    private int _payments;
    private int _wireTransferId;
    private int _showNoCostsOnSlip;
    private String _shippingInstructions;
    private int _bisextorderid;
    private String _languageOfInterest;
    private int _ecOrderId;
    private String _giftMsg;
    private String _paypalTransactionId;
    private String _billingAgreementId;
    private String _checkOrMo;
    private String _packingInstructions;
    private int _complimentary;
    private int _readyForExport;
    private String _bisextproofxml;
    private int _maestro3dSecure;
    private String _bisextcustomerip;
    private String _bisextcvvresult;
    private String _bisextavsresult;
    private String _orderNotes;
    private String _bisextfraudresult;
    private String _bisextfraudcode;
    private String _poNumber;
    private String _paymentType;
    private int _dropShip;
    private String _customerNumber;
    private int _repeatCustomer;
    private int _bisextattemptid;
    private int _bisextpaymentproductid;
    private int _directDebitId;
    private int _bisstoreid;
    private int _bisextpaymentmethodid;
    private int _bisextstatusid;
    private int _bisextamount;
    private int _rtbtId;
    private int _paymentTermId;
    private int _unauthorisedOrder;
    private String _amsStatus;
    private int _addressOverride;
    private int _billSameAsShip;
    private String _masterGuid;
    private int _saveCreditCard;
    private int _priceListId;
    private String _bisvendor;
    private String _bisaddref;
    private int _bisexteffortid;
    private int _bisextpaymentreference;
    private int _kcpResponseId;
    private String _promoOffer;
    private String _instCustomer;
    private String _partnerGuid;
    private Date _startDate;
    private Date _endDate;

    public OrderModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Order toModel(OrderSoap soapModel) {
        Order model = new OrderImpl();

        model.setId(soapModel.getId());
        model.setOrderNumber(soapModel.getOrderNumber());
        model.setCustomerId(soapModel.getCustomerId());
        model.setShipMethodId(soapModel.getShipMethodId());
        model.setPromoId(soapModel.getPromoId());
        model.setShipAddressId(soapModel.getShipAddressId());
        model.setBillAddressId(soapModel.getBillAddressId());
        model.setCreditCardId(soapModel.getCreditCardId());
        model.setCertitaxTrxnId(soapModel.getCertitaxTrxnId());
        model.setCurrencyId(soapModel.getCurrencyId());
        model.setSubtotal(soapModel.getSubtotal());
        model.setSubtotalVat(soapModel.getSubtotalVat());
        model.setShipping(soapModel.getShipping());
        model.setTax(soapModel.getTax());
        model.setTotal(soapModel.getTotal());
        model.setNoSignatureRequired(soapModel.getNoSignatureRequired());
        model.setCreditCardApprovalCode(soapModel.getCreditCardApprovalCode());
        model.setCreditCardRetries(soapModel.getCreditCardRetries());
        model.setOrganizationId(soapModel.getOrganizationId());
        model.setFormWhereEntered(soapModel.getFormWhereEntered());
        model.setVertical(soapModel.getVertical());
        model.setVatEstimationCountryCode(soapModel.getVatEstimationCountryCode());
        model.setCreatedAt(soapModel.getCreatedAt());
        model.setUpdatedAt(soapModel.getUpdatedAt());
        model.setOrderedDate(soapModel.getOrderedDate());
        model.setSalesrepId(soapModel.getSalesrepId());
        model.setSiteId(soapModel.getSiteId());
        model.setShippingHeaderAmount(soapModel.getShippingHeaderAmount());
        model.setPayments(soapModel.getPayments());
        model.setWireTransferId(soapModel.getWireTransferId());
        model.setShowNoCostsOnSlip(soapModel.getShowNoCostsOnSlip());
        model.setShippingInstructions(soapModel.getShippingInstructions());
        model.setBisextorderid(soapModel.getBisextorderid());
        model.setLanguageOfInterest(soapModel.getLanguageOfInterest());
        model.setEcOrderId(soapModel.getEcOrderId());
        model.setGiftMsg(soapModel.getGiftMsg());
        model.setPaypalTransactionId(soapModel.getPaypalTransactionId());
        model.setBillingAgreementId(soapModel.getBillingAgreementId());
        model.setCheckOrMo(soapModel.getCheckOrMo());
        model.setPackingInstructions(soapModel.getPackingInstructions());
        model.setComplimentary(soapModel.getComplimentary());
        model.setReadyForExport(soapModel.getReadyForExport());
        model.setBisextproofxml(soapModel.getBisextproofxml());
        model.setMaestro3dSecure(soapModel.getMaestro3dSecure());
        model.setBisextcustomerip(soapModel.getBisextcustomerip());
        model.setBisextcvvresult(soapModel.getBisextcvvresult());
        model.setBisextavsresult(soapModel.getBisextavsresult());
        model.setOrderNotes(soapModel.getOrderNotes());
        model.setBisextfraudresult(soapModel.getBisextfraudresult());
        model.setBisextfraudcode(soapModel.getBisextfraudcode());
        model.setPoNumber(soapModel.getPoNumber());
        model.setPaymentType(soapModel.getPaymentType());
        model.setDropShip(soapModel.getDropShip());
        model.setCustomerNumber(soapModel.getCustomerNumber());
        model.setRepeatCustomer(soapModel.getRepeatCustomer());
        model.setBisextattemptid(soapModel.getBisextattemptid());
        model.setBisextpaymentproductid(soapModel.getBisextpaymentproductid());
        model.setDirectDebitId(soapModel.getDirectDebitId());
        model.setBisstoreid(soapModel.getBisstoreid());
        model.setBisextpaymentmethodid(soapModel.getBisextpaymentmethodid());
        model.setBisextstatusid(soapModel.getBisextstatusid());
        model.setBisextamount(soapModel.getBisextamount());
        model.setRtbtId(soapModel.getRtbtId());
        model.setPaymentTermId(soapModel.getPaymentTermId());
        model.setUnauthorisedOrder(soapModel.getUnauthorisedOrder());
        model.setAmsStatus(soapModel.getAmsStatus());
        model.setAddressOverride(soapModel.getAddressOverride());
        model.setBillSameAsShip(soapModel.getBillSameAsShip());
        model.setMasterGuid(soapModel.getMasterGuid());
        model.setSaveCreditCard(soapModel.getSaveCreditCard());
        model.setPriceListId(soapModel.getPriceListId());
        model.setBisvendor(soapModel.getBisvendor());
        model.setBisaddref(soapModel.getBisaddref());
        model.setBisexteffortid(soapModel.getBisexteffortid());
        model.setBisextpaymentreference(soapModel.getBisextpaymentreference());
        model.setKcpResponseId(soapModel.getKcpResponseId());
        model.setPromoOffer(soapModel.getPromoOffer());
        model.setInstCustomer(soapModel.getInstCustomer());
        model.setPartnerGuid(soapModel.getPartnerGuid());
        model.setStartDate(soapModel.getStartDate());
        model.setEndDate(soapModel.getEndDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Order> toModels(OrderSoap[] soapModels) {
        List<Order> models = new ArrayList<Order>(soapModels.length);

        for (OrderSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public int getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(int pk) {
        setId(pk);
    }

    public Serializable getPrimaryKeyObj() {
        return new Integer(_id);
    }

    public int getId() {
        return _id;
    }

    public void setId(int id) {
        _id = id;
    }

    public int getOrderNumber() {
        return _orderNumber;
    }

    public void setOrderNumber(int orderNumber) {
        _orderNumber = orderNumber;
    }

    public int getCustomerId() {
        return _customerId;
    }

    public void setCustomerId(int customerId) {
        _customerId = customerId;
    }

    public int getShipMethodId() {
        return _shipMethodId;
    }

    public void setShipMethodId(int shipMethodId) {
        _shipMethodId = shipMethodId;
    }

    public int getPromoId() {
        return _promoId;
    }

    public void setPromoId(int promoId) {
        _promoId = promoId;
    }

    public int getShipAddressId() {
        return _shipAddressId;
    }

    public void setShipAddressId(int shipAddressId) {
        _shipAddressId = shipAddressId;
    }

    public int getBillAddressId() {
        return _billAddressId;
    }

    public void setBillAddressId(int billAddressId) {
        _billAddressId = billAddressId;
    }

    public int getCreditCardId() {
        return _creditCardId;
    }

    public void setCreditCardId(int creditCardId) {
        _creditCardId = creditCardId;
    }

    public String getCertitaxTrxnId() {
        if (_certitaxTrxnId == null) {
            return StringPool.BLANK;
        } else {
            return _certitaxTrxnId;
        }
    }

    public void setCertitaxTrxnId(String certitaxTrxnId) {
        _certitaxTrxnId = certitaxTrxnId;
    }

    public int getCurrencyId() {
        return _currencyId;
    }

    public void setCurrencyId(int currencyId) {
        _currencyId = currencyId;
    }

    public double getSubtotal() {
        return _subtotal;
    }

    public void setSubtotal(double subtotal) {
        _subtotal = subtotal;
    }

    public double getSubtotalVat() {
        return _subtotalVat;
    }

    public void setSubtotalVat(double subtotalVat) {
        _subtotalVat = subtotalVat;
    }

    public double getShipping() {
        return _shipping;
    }

    public void setShipping(double shipping) {
        _shipping = shipping;
    }

    public double getTax() {
        return _tax;
    }

    public void setTax(double tax) {
        _tax = tax;
    }

    public double getTotal() {
        return _total;
    }

    public void setTotal(double total) {
        _total = total;
    }

    public int getNoSignatureRequired() {
        return _noSignatureRequired;
    }

    public void setNoSignatureRequired(int noSignatureRequired) {
        _noSignatureRequired = noSignatureRequired;
    }

    public String getCreditCardApprovalCode() {
        if (_creditCardApprovalCode == null) {
            return StringPool.BLANK;
        } else {
            return _creditCardApprovalCode;
        }
    }

    public void setCreditCardApprovalCode(String creditCardApprovalCode) {
        _creditCardApprovalCode = creditCardApprovalCode;
    }

    public int getCreditCardRetries() {
        return _creditCardRetries;
    }

    public void setCreditCardRetries(int creditCardRetries) {
        _creditCardRetries = creditCardRetries;
    }

    public int getOrganizationId() {
        return _organizationId;
    }

    public void setOrganizationId(int organizationId) {
        _organizationId = organizationId;
    }

    public String getFormWhereEntered() {
        if (_formWhereEntered == null) {
            return StringPool.BLANK;
        } else {
            return _formWhereEntered;
        }
    }

    public void setFormWhereEntered(String formWhereEntered) {
        _formWhereEntered = formWhereEntered;
    }

    public String getVertical() {
        if (_vertical == null) {
            return StringPool.BLANK;
        } else {
            return _vertical;
        }
    }

    public void setVertical(String vertical) {
        _vertical = vertical;
    }

    public String getVatEstimationCountryCode() {
        if (_vatEstimationCountryCode == null) {
            return StringPool.BLANK;
        } else {
            return _vatEstimationCountryCode;
        }
    }

    public void setVatEstimationCountryCode(String vatEstimationCountryCode) {
        _vatEstimationCountryCode = vatEstimationCountryCode;
    }

    public Date getCreatedAt() {
        return _createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        _createdAt = createdAt;
    }

    public Date getUpdatedAt() {
        return _updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        _updatedAt = updatedAt;
    }

    public Date getOrderedDate() {
        return _orderedDate;
    }

    public void setOrderedDate(Date orderedDate) {
        _orderedDate = orderedDate;
    }

    public int getSalesrepId() {
        return _salesrepId;
    }

    public void setSalesrepId(int salesrepId) {
        _salesrepId = salesrepId;
    }

    public int getSiteId() {
        return _siteId;
    }

    public void setSiteId(int siteId) {
        _siteId = siteId;
    }

    public double getShippingHeaderAmount() {
        return _shippingHeaderAmount;
    }

    public void setShippingHeaderAmount(double shippingHeaderAmount) {
        _shippingHeaderAmount = shippingHeaderAmount;
    }

    public int getPayments() {
        return _payments;
    }

    public void setPayments(int payments) {
        _payments = payments;
    }

    public int getWireTransferId() {
        return _wireTransferId;
    }

    public void setWireTransferId(int wireTransferId) {
        _wireTransferId = wireTransferId;
    }

    public int getShowNoCostsOnSlip() {
        return _showNoCostsOnSlip;
    }

    public void setShowNoCostsOnSlip(int showNoCostsOnSlip) {
        _showNoCostsOnSlip = showNoCostsOnSlip;
    }

    public String getShippingInstructions() {
        if (_shippingInstructions == null) {
            return StringPool.BLANK;
        } else {
            return _shippingInstructions;
        }
    }

    public void setShippingInstructions(String shippingInstructions) {
        _shippingInstructions = shippingInstructions;
    }

    public int getBisextorderid() {
        return _bisextorderid;
    }

    public void setBisextorderid(int bisextorderid) {
        _bisextorderid = bisextorderid;
    }

    public String getLanguageOfInterest() {
        if (_languageOfInterest == null) {
            return StringPool.BLANK;
        } else {
            return _languageOfInterest;
        }
    }

    public void setLanguageOfInterest(String languageOfInterest) {
        _languageOfInterest = languageOfInterest;
    }

    public int getEcOrderId() {
        return _ecOrderId;
    }

    public void setEcOrderId(int ecOrderId) {
        _ecOrderId = ecOrderId;
    }

    public String getGiftMsg() {
        if (_giftMsg == null) {
            return StringPool.BLANK;
        } else {
            return _giftMsg;
        }
    }

    public void setGiftMsg(String giftMsg) {
        _giftMsg = giftMsg;
    }

    public String getPaypalTransactionId() {
        if (_paypalTransactionId == null) {
            return StringPool.BLANK;
        } else {
            return _paypalTransactionId;
        }
    }

    public void setPaypalTransactionId(String paypalTransactionId) {
        _paypalTransactionId = paypalTransactionId;
    }

    public String getBillingAgreementId() {
        if (_billingAgreementId == null) {
            return StringPool.BLANK;
        } else {
            return _billingAgreementId;
        }
    }

    public void setBillingAgreementId(String billingAgreementId) {
        _billingAgreementId = billingAgreementId;
    }

    public String getCheckOrMo() {
        if (_checkOrMo == null) {
            return StringPool.BLANK;
        } else {
            return _checkOrMo;
        }
    }

    public void setCheckOrMo(String checkOrMo) {
        _checkOrMo = checkOrMo;
    }

    public String getPackingInstructions() {
        if (_packingInstructions == null) {
            return StringPool.BLANK;
        } else {
            return _packingInstructions;
        }
    }

    public void setPackingInstructions(String packingInstructions) {
        _packingInstructions = packingInstructions;
    }

    public int getComplimentary() {
        return _complimentary;
    }

    public void setComplimentary(int complimentary) {
        _complimentary = complimentary;
    }

    public int getReadyForExport() {
        return _readyForExport;
    }

    public void setReadyForExport(int readyForExport) {
        _readyForExport = readyForExport;
    }

    public String getBisextproofxml() {
        if (_bisextproofxml == null) {
            return StringPool.BLANK;
        } else {
            return _bisextproofxml;
        }
    }

    public void setBisextproofxml(String bisextproofxml) {
        _bisextproofxml = bisextproofxml;
    }

    public int getMaestro3dSecure() {
        return _maestro3dSecure;
    }

    public void setMaestro3dSecure(int maestro3dSecure) {
        _maestro3dSecure = maestro3dSecure;
    }

    public String getBisextcustomerip() {
        if (_bisextcustomerip == null) {
            return StringPool.BLANK;
        } else {
            return _bisextcustomerip;
        }
    }

    public void setBisextcustomerip(String bisextcustomerip) {
        _bisextcustomerip = bisextcustomerip;
    }

    public String getBisextcvvresult() {
        if (_bisextcvvresult == null) {
            return StringPool.BLANK;
        } else {
            return _bisextcvvresult;
        }
    }

    public void setBisextcvvresult(String bisextcvvresult) {
        _bisextcvvresult = bisextcvvresult;
    }

    public String getBisextavsresult() {
        if (_bisextavsresult == null) {
            return StringPool.BLANK;
        } else {
            return _bisextavsresult;
        }
    }

    public void setBisextavsresult(String bisextavsresult) {
        _bisextavsresult = bisextavsresult;
    }

    public String getOrderNotes() {
        if (_orderNotes == null) {
            return StringPool.BLANK;
        } else {
            return _orderNotes;
        }
    }

    public void setOrderNotes(String orderNotes) {
        _orderNotes = orderNotes;
    }

    public String getBisextfraudresult() {
        if (_bisextfraudresult == null) {
            return StringPool.BLANK;
        } else {
            return _bisextfraudresult;
        }
    }

    public void setBisextfraudresult(String bisextfraudresult) {
        _bisextfraudresult = bisextfraudresult;
    }

    public String getBisextfraudcode() {
        if (_bisextfraudcode == null) {
            return StringPool.BLANK;
        } else {
            return _bisextfraudcode;
        }
    }

    public void setBisextfraudcode(String bisextfraudcode) {
        _bisextfraudcode = bisextfraudcode;
    }

    public String getPoNumber() {
        if (_poNumber == null) {
            return StringPool.BLANK;
        } else {
            return _poNumber;
        }
    }

    public void setPoNumber(String poNumber) {
        _poNumber = poNumber;
    }

    public String getPaymentType() {
        if (_paymentType == null) {
            return StringPool.BLANK;
        } else {
            return _paymentType;
        }
    }

    public void setPaymentType(String paymentType) {
        _paymentType = paymentType;
    }

    public int getDropShip() {
        return _dropShip;
    }

    public void setDropShip(int dropShip) {
        _dropShip = dropShip;
    }

    public String getCustomerNumber() {
        if (_customerNumber == null) {
            return StringPool.BLANK;
        } else {
            return _customerNumber;
        }
    }

    public void setCustomerNumber(String customerNumber) {
        _customerNumber = customerNumber;
    }

    public int getRepeatCustomer() {
        return _repeatCustomer;
    }

    public void setRepeatCustomer(int repeatCustomer) {
        _repeatCustomer = repeatCustomer;
    }

    public int getBisextattemptid() {
        return _bisextattemptid;
    }

    public void setBisextattemptid(int bisextattemptid) {
        _bisextattemptid = bisextattemptid;
    }

    public int getBisextpaymentproductid() {
        return _bisextpaymentproductid;
    }

    public void setBisextpaymentproductid(int bisextpaymentproductid) {
        _bisextpaymentproductid = bisextpaymentproductid;
    }

    public int getDirectDebitId() {
        return _directDebitId;
    }

    public void setDirectDebitId(int directDebitId) {
        _directDebitId = directDebitId;
    }

    public int getBisstoreid() {
        return _bisstoreid;
    }

    public void setBisstoreid(int bisstoreid) {
        _bisstoreid = bisstoreid;
    }

    public int getBisextpaymentmethodid() {
        return _bisextpaymentmethodid;
    }

    public void setBisextpaymentmethodid(int bisextpaymentmethodid) {
        _bisextpaymentmethodid = bisextpaymentmethodid;
    }

    public int getBisextstatusid() {
        return _bisextstatusid;
    }

    public void setBisextstatusid(int bisextstatusid) {
        _bisextstatusid = bisextstatusid;
    }

    public int getBisextamount() {
        return _bisextamount;
    }

    public void setBisextamount(int bisextamount) {
        _bisextamount = bisextamount;
    }

    public int getRtbtId() {
        return _rtbtId;
    }

    public void setRtbtId(int rtbtId) {
        _rtbtId = rtbtId;
    }

    public int getPaymentTermId() {
        return _paymentTermId;
    }

    public void setPaymentTermId(int paymentTermId) {
        _paymentTermId = paymentTermId;
    }

    public int getUnauthorisedOrder() {
        return _unauthorisedOrder;
    }

    public void setUnauthorisedOrder(int unauthorisedOrder) {
        _unauthorisedOrder = unauthorisedOrder;
    }

    public String getAmsStatus() {
        if (_amsStatus == null) {
            return StringPool.BLANK;
        } else {
            return _amsStatus;
        }
    }

    public void setAmsStatus(String amsStatus) {
        _amsStatus = amsStatus;
    }

    public int getAddressOverride() {
        return _addressOverride;
    }

    public void setAddressOverride(int addressOverride) {
        _addressOverride = addressOverride;
    }

    public int getBillSameAsShip() {
        return _billSameAsShip;
    }

    public void setBillSameAsShip(int billSameAsShip) {
        _billSameAsShip = billSameAsShip;
    }

    public String getMasterGuid() {
        if (_masterGuid == null) {
            return StringPool.BLANK;
        } else {
            return _masterGuid;
        }
    }

    public void setMasterGuid(String masterGuid) {
        _masterGuid = masterGuid;
    }

    public int getSaveCreditCard() {
        return _saveCreditCard;
    }

    public void setSaveCreditCard(int saveCreditCard) {
        _saveCreditCard = saveCreditCard;
    }

    public int getPriceListId() {
        return _priceListId;
    }

    public void setPriceListId(int priceListId) {
        _priceListId = priceListId;
    }

    public String getBisvendor() {
        if (_bisvendor == null) {
            return StringPool.BLANK;
        } else {
            return _bisvendor;
        }
    }

    public void setBisvendor(String bisvendor) {
        _bisvendor = bisvendor;
    }

    public String getBisaddref() {
        if (_bisaddref == null) {
            return StringPool.BLANK;
        } else {
            return _bisaddref;
        }
    }

    public void setBisaddref(String bisaddref) {
        _bisaddref = bisaddref;
    }

    public int getBisexteffortid() {
        return _bisexteffortid;
    }

    public void setBisexteffortid(int bisexteffortid) {
        _bisexteffortid = bisexteffortid;
    }

    public int getBisextpaymentreference() {
        return _bisextpaymentreference;
    }

    public void setBisextpaymentreference(int bisextpaymentreference) {
        _bisextpaymentreference = bisextpaymentreference;
    }

    public int getKcpResponseId() {
        return _kcpResponseId;
    }

    public void setKcpResponseId(int kcpResponseId) {
        _kcpResponseId = kcpResponseId;
    }

    public String getPromoOffer() {
        if (_promoOffer == null) {
            return StringPool.BLANK;
        } else {
            return _promoOffer;
        }
    }

    public void setPromoOffer(String promoOffer) {
        _promoOffer = promoOffer;
    }

    public String getInstCustomer() {
        if (_instCustomer == null) {
            return StringPool.BLANK;
        } else {
            return _instCustomer;
        }
    }

    public void setInstCustomer(String instCustomer) {
        _instCustomer = instCustomer;
    }

    public String getPartnerGuid() {
        if (_partnerGuid == null) {
            return StringPool.BLANK;
        } else {
            return _partnerGuid;
        }
    }

    public void setPartnerGuid(String partnerGuid) {
        _partnerGuid = partnerGuid;
    }

    public Date getStartDate() {
        return _startDate;
    }

    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    public Date getEndDate() {
        return _endDate;
    }

    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    public Order toEscapedModel() {
        if (isEscapedModel()) {
            return (Order) this;
        } else {
            return (Order) Proxy.newProxyInstance(Order.class.getClassLoader(),
                new Class[] { Order.class }, new AutoEscapeBeanHandler(this));
        }
    }

    public Object clone() {
        OrderImpl orderImpl = new OrderImpl();

        orderImpl.setId(getId());

        orderImpl.setOrderNumber(getOrderNumber());

        orderImpl.setCustomerId(getCustomerId());

        orderImpl.setShipMethodId(getShipMethodId());

        orderImpl.setPromoId(getPromoId());

        orderImpl.setShipAddressId(getShipAddressId());

        orderImpl.setBillAddressId(getBillAddressId());

        orderImpl.setCreditCardId(getCreditCardId());

        orderImpl.setCertitaxTrxnId(getCertitaxTrxnId());

        orderImpl.setCurrencyId(getCurrencyId());

        orderImpl.setSubtotal(getSubtotal());

        orderImpl.setSubtotalVat(getSubtotalVat());

        orderImpl.setShipping(getShipping());

        orderImpl.setTax(getTax());

        orderImpl.setTotal(getTotal());

        orderImpl.setNoSignatureRequired(getNoSignatureRequired());

        orderImpl.setCreditCardApprovalCode(getCreditCardApprovalCode());

        orderImpl.setCreditCardRetries(getCreditCardRetries());

        orderImpl.setOrganizationId(getOrganizationId());

        orderImpl.setFormWhereEntered(getFormWhereEntered());

        orderImpl.setVertical(getVertical());

        orderImpl.setVatEstimationCountryCode(getVatEstimationCountryCode());

        orderImpl.setCreatedAt(getCreatedAt());

        orderImpl.setUpdatedAt(getUpdatedAt());

        orderImpl.setOrderedDate(getOrderedDate());

        orderImpl.setSalesrepId(getSalesrepId());

        orderImpl.setSiteId(getSiteId());

        orderImpl.setShippingHeaderAmount(getShippingHeaderAmount());

        orderImpl.setPayments(getPayments());

        orderImpl.setWireTransferId(getWireTransferId());

        orderImpl.setShowNoCostsOnSlip(getShowNoCostsOnSlip());

        orderImpl.setShippingInstructions(getShippingInstructions());

        orderImpl.setBisextorderid(getBisextorderid());

        orderImpl.setLanguageOfInterest(getLanguageOfInterest());

        orderImpl.setEcOrderId(getEcOrderId());

        orderImpl.setGiftMsg(getGiftMsg());

        orderImpl.setPaypalTransactionId(getPaypalTransactionId());

        orderImpl.setBillingAgreementId(getBillingAgreementId());

        orderImpl.setCheckOrMo(getCheckOrMo());

        orderImpl.setPackingInstructions(getPackingInstructions());

        orderImpl.setComplimentary(getComplimentary());

        orderImpl.setReadyForExport(getReadyForExport());

        orderImpl.setBisextproofxml(getBisextproofxml());

        orderImpl.setMaestro3dSecure(getMaestro3dSecure());

        orderImpl.setBisextcustomerip(getBisextcustomerip());

        orderImpl.setBisextcvvresult(getBisextcvvresult());

        orderImpl.setBisextavsresult(getBisextavsresult());

        orderImpl.setOrderNotes(getOrderNotes());

        orderImpl.setBisextfraudresult(getBisextfraudresult());

        orderImpl.setBisextfraudcode(getBisextfraudcode());

        orderImpl.setPoNumber(getPoNumber());

        orderImpl.setPaymentType(getPaymentType());

        orderImpl.setDropShip(getDropShip());

        orderImpl.setCustomerNumber(getCustomerNumber());

        orderImpl.setRepeatCustomer(getRepeatCustomer());

        orderImpl.setBisextattemptid(getBisextattemptid());

        orderImpl.setBisextpaymentproductid(getBisextpaymentproductid());

        orderImpl.setDirectDebitId(getDirectDebitId());

        orderImpl.setBisstoreid(getBisstoreid());

        orderImpl.setBisextpaymentmethodid(getBisextpaymentmethodid());

        orderImpl.setBisextstatusid(getBisextstatusid());

        orderImpl.setBisextamount(getBisextamount());

        orderImpl.setRtbtId(getRtbtId());

        orderImpl.setPaymentTermId(getPaymentTermId());

        orderImpl.setUnauthorisedOrder(getUnauthorisedOrder());

        orderImpl.setAmsStatus(getAmsStatus());

        orderImpl.setAddressOverride(getAddressOverride());

        orderImpl.setBillSameAsShip(getBillSameAsShip());

        orderImpl.setMasterGuid(getMasterGuid());

        orderImpl.setSaveCreditCard(getSaveCreditCard());

        orderImpl.setPriceListId(getPriceListId());

        orderImpl.setBisvendor(getBisvendor());

        orderImpl.setBisaddref(getBisaddref());

        orderImpl.setBisexteffortid(getBisexteffortid());

        orderImpl.setBisextpaymentreference(getBisextpaymentreference());

        orderImpl.setKcpResponseId(getKcpResponseId());

        orderImpl.setPromoOffer(getPromoOffer());

        orderImpl.setInstCustomer(getInstCustomer());

        orderImpl.setPartnerGuid(getPartnerGuid());

        orderImpl.setStartDate(getStartDate());

        orderImpl.setEndDate(getEndDate());

        return orderImpl;
    }

    public int compareTo(Order order) {
        int pk = order.getPrimaryKey();

        if (getPrimaryKey() < pk) {
            return -1;
        } else if (getPrimaryKey() > pk) {
            return 1;
        } else {
            return 0;
        }
    }

    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Order order = null;

        try {
            order = (Order) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        int pk = order.getPrimaryKey();

        if (getPrimaryKey() == pk) {
            return true;
        } else {
            return false;
        }
    }

    public int hashCode() {
        return getPrimaryKey();
    }

    public String toString() {
        StringBundler sb = new StringBundler(163);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", orderNumber=");
        sb.append(getOrderNumber());
        sb.append(", customerId=");
        sb.append(getCustomerId());
        sb.append(", shipMethodId=");
        sb.append(getShipMethodId());
        sb.append(", promoId=");
        sb.append(getPromoId());
        sb.append(", shipAddressId=");
        sb.append(getShipAddressId());
        sb.append(", billAddressId=");
        sb.append(getBillAddressId());
        sb.append(", creditCardId=");
        sb.append(getCreditCardId());
        sb.append(", certitaxTrxnId=");
        sb.append(getCertitaxTrxnId());
        sb.append(", currencyId=");
        sb.append(getCurrencyId());
        sb.append(", subtotal=");
        sb.append(getSubtotal());
        sb.append(", subtotalVat=");
        sb.append(getSubtotalVat());
        sb.append(", shipping=");
        sb.append(getShipping());
        sb.append(", tax=");
        sb.append(getTax());
        sb.append(", total=");
        sb.append(getTotal());
        sb.append(", noSignatureRequired=");
        sb.append(getNoSignatureRequired());
        sb.append(", creditCardApprovalCode=");
        sb.append(getCreditCardApprovalCode());
        sb.append(", creditCardRetries=");
        sb.append(getCreditCardRetries());
        sb.append(", organizationId=");
        sb.append(getOrganizationId());
        sb.append(", formWhereEntered=");
        sb.append(getFormWhereEntered());
        sb.append(", vertical=");
        sb.append(getVertical());
        sb.append(", vatEstimationCountryCode=");
        sb.append(getVatEstimationCountryCode());
        sb.append(", createdAt=");
        sb.append(getCreatedAt());
        sb.append(", updatedAt=");
        sb.append(getUpdatedAt());
        sb.append(", orderedDate=");
        sb.append(getOrderedDate());
        sb.append(", salesrepId=");
        sb.append(getSalesrepId());
        sb.append(", siteId=");
        sb.append(getSiteId());
        sb.append(", shippingHeaderAmount=");
        sb.append(getShippingHeaderAmount());
        sb.append(", payments=");
        sb.append(getPayments());
        sb.append(", wireTransferId=");
        sb.append(getWireTransferId());
        sb.append(", showNoCostsOnSlip=");
        sb.append(getShowNoCostsOnSlip());
        sb.append(", shippingInstructions=");
        sb.append(getShippingInstructions());
        sb.append(", bisextorderid=");
        sb.append(getBisextorderid());
        sb.append(", languageOfInterest=");
        sb.append(getLanguageOfInterest());
        sb.append(", ecOrderId=");
        sb.append(getEcOrderId());
        sb.append(", giftMsg=");
        sb.append(getGiftMsg());
        sb.append(", paypalTransactionId=");
        sb.append(getPaypalTransactionId());
        sb.append(", billingAgreementId=");
        sb.append(getBillingAgreementId());
        sb.append(", checkOrMo=");
        sb.append(getCheckOrMo());
        sb.append(", packingInstructions=");
        sb.append(getPackingInstructions());
        sb.append(", complimentary=");
        sb.append(getComplimentary());
        sb.append(", readyForExport=");
        sb.append(getReadyForExport());
        sb.append(", bisextproofxml=");
        sb.append(getBisextproofxml());
        sb.append(", maestro3dSecure=");
        sb.append(getMaestro3dSecure());
        sb.append(", bisextcustomerip=");
        sb.append(getBisextcustomerip());
        sb.append(", bisextcvvresult=");
        sb.append(getBisextcvvresult());
        sb.append(", bisextavsresult=");
        sb.append(getBisextavsresult());
        sb.append(", orderNotes=");
        sb.append(getOrderNotes());
        sb.append(", bisextfraudresult=");
        sb.append(getBisextfraudresult());
        sb.append(", bisextfraudcode=");
        sb.append(getBisextfraudcode());
        sb.append(", poNumber=");
        sb.append(getPoNumber());
        sb.append(", paymentType=");
        sb.append(getPaymentType());
        sb.append(", dropShip=");
        sb.append(getDropShip());
        sb.append(", customerNumber=");
        sb.append(getCustomerNumber());
        sb.append(", repeatCustomer=");
        sb.append(getRepeatCustomer());
        sb.append(", bisextattemptid=");
        sb.append(getBisextattemptid());
        sb.append(", bisextpaymentproductid=");
        sb.append(getBisextpaymentproductid());
        sb.append(", directDebitId=");
        sb.append(getDirectDebitId());
        sb.append(", bisstoreid=");
        sb.append(getBisstoreid());
        sb.append(", bisextpaymentmethodid=");
        sb.append(getBisextpaymentmethodid());
        sb.append(", bisextstatusid=");
        sb.append(getBisextstatusid());
        sb.append(", bisextamount=");
        sb.append(getBisextamount());
        sb.append(", rtbtId=");
        sb.append(getRtbtId());
        sb.append(", paymentTermId=");
        sb.append(getPaymentTermId());
        sb.append(", unauthorisedOrder=");
        sb.append(getUnauthorisedOrder());
        sb.append(", amsStatus=");
        sb.append(getAmsStatus());
        sb.append(", addressOverride=");
        sb.append(getAddressOverride());
        sb.append(", billSameAsShip=");
        sb.append(getBillSameAsShip());
        sb.append(", masterGuid=");
        sb.append(getMasterGuid());
        sb.append(", saveCreditCard=");
        sb.append(getSaveCreditCard());
        sb.append(", priceListId=");
        sb.append(getPriceListId());
        sb.append(", bisvendor=");
        sb.append(getBisvendor());
        sb.append(", bisaddref=");
        sb.append(getBisaddref());
        sb.append(", bisexteffortid=");
        sb.append(getBisexteffortid());
        sb.append(", bisextpaymentreference=");
        sb.append(getBisextpaymentreference());
        sb.append(", kcpResponseId=");
        sb.append(getKcpResponseId());
        sb.append(", promoOffer=");
        sb.append(getPromoOffer());
        sb.append(", instCustomer=");
        sb.append(getInstCustomer());
        sb.append(", partnerGuid=");
        sb.append(getPartnerGuid());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(247);

        sb.append("<model><model-name>");
        sb.append("com.erp.lead.model.Order");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderNumber</column-name><column-value><![CDATA[");
        sb.append(getOrderNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerId</column-name><column-value><![CDATA[");
        sb.append(getCustomerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shipMethodId</column-name><column-value><![CDATA[");
        sb.append(getShipMethodId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>promoId</column-name><column-value><![CDATA[");
        sb.append(getPromoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shipAddressId</column-name><column-value><![CDATA[");
        sb.append(getShipAddressId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billAddressId</column-name><column-value><![CDATA[");
        sb.append(getBillAddressId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creditCardId</column-name><column-value><![CDATA[");
        sb.append(getCreditCardId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>certitaxTrxnId</column-name><column-value><![CDATA[");
        sb.append(getCertitaxTrxnId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currencyId</column-name><column-value><![CDATA[");
        sb.append(getCurrencyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subtotal</column-name><column-value><![CDATA[");
        sb.append(getSubtotal());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subtotalVat</column-name><column-value><![CDATA[");
        sb.append(getSubtotalVat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shipping</column-name><column-value><![CDATA[");
        sb.append(getShipping());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tax</column-name><column-value><![CDATA[");
        sb.append(getTax());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>total</column-name><column-value><![CDATA[");
        sb.append(getTotal());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>noSignatureRequired</column-name><column-value><![CDATA[");
        sb.append(getNoSignatureRequired());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creditCardApprovalCode</column-name><column-value><![CDATA[");
        sb.append(getCreditCardApprovalCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creditCardRetries</column-name><column-value><![CDATA[");
        sb.append(getCreditCardRetries());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationId</column-name><column-value><![CDATA[");
        sb.append(getOrganizationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formWhereEntered</column-name><column-value><![CDATA[");
        sb.append(getFormWhereEntered());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vertical</column-name><column-value><![CDATA[");
        sb.append(getVertical());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vatEstimationCountryCode</column-name><column-value><![CDATA[");
        sb.append(getVatEstimationCountryCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdAt</column-name><column-value><![CDATA[");
        sb.append(getCreatedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updatedAt</column-name><column-value><![CDATA[");
        sb.append(getUpdatedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderedDate</column-name><column-value><![CDATA[");
        sb.append(getOrderedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salesrepId</column-name><column-value><![CDATA[");
        sb.append(getSalesrepId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>siteId</column-name><column-value><![CDATA[");
        sb.append(getSiteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shippingHeaderAmount</column-name><column-value><![CDATA[");
        sb.append(getShippingHeaderAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>payments</column-name><column-value><![CDATA[");
        sb.append(getPayments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>wireTransferId</column-name><column-value><![CDATA[");
        sb.append(getWireTransferId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>showNoCostsOnSlip</column-name><column-value><![CDATA[");
        sb.append(getShowNoCostsOnSlip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shippingInstructions</column-name><column-value><![CDATA[");
        sb.append(getShippingInstructions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextorderid</column-name><column-value><![CDATA[");
        sb.append(getBisextorderid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>languageOfInterest</column-name><column-value><![CDATA[");
        sb.append(getLanguageOfInterest());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ecOrderId</column-name><column-value><![CDATA[");
        sb.append(getEcOrderId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>giftMsg</column-name><column-value><![CDATA[");
        sb.append(getGiftMsg());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paypalTransactionId</column-name><column-value><![CDATA[");
        sb.append(getPaypalTransactionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billingAgreementId</column-name><column-value><![CDATA[");
        sb.append(getBillingAgreementId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkOrMo</column-name><column-value><![CDATA[");
        sb.append(getCheckOrMo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>packingInstructions</column-name><column-value><![CDATA[");
        sb.append(getPackingInstructions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>complimentary</column-name><column-value><![CDATA[");
        sb.append(getComplimentary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>readyForExport</column-name><column-value><![CDATA[");
        sb.append(getReadyForExport());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextproofxml</column-name><column-value><![CDATA[");
        sb.append(getBisextproofxml());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>maestro3dSecure</column-name><column-value><![CDATA[");
        sb.append(getMaestro3dSecure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextcustomerip</column-name><column-value><![CDATA[");
        sb.append(getBisextcustomerip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextcvvresult</column-name><column-value><![CDATA[");
        sb.append(getBisextcvvresult());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextavsresult</column-name><column-value><![CDATA[");
        sb.append(getBisextavsresult());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderNotes</column-name><column-value><![CDATA[");
        sb.append(getOrderNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextfraudresult</column-name><column-value><![CDATA[");
        sb.append(getBisextfraudresult());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextfraudcode</column-name><column-value><![CDATA[");
        sb.append(getBisextfraudcode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>poNumber</column-name><column-value><![CDATA[");
        sb.append(getPoNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentType</column-name><column-value><![CDATA[");
        sb.append(getPaymentType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dropShip</column-name><column-value><![CDATA[");
        sb.append(getDropShip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerNumber</column-name><column-value><![CDATA[");
        sb.append(getCustomerNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>repeatCustomer</column-name><column-value><![CDATA[");
        sb.append(getRepeatCustomer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextattemptid</column-name><column-value><![CDATA[");
        sb.append(getBisextattemptid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextpaymentproductid</column-name><column-value><![CDATA[");
        sb.append(getBisextpaymentproductid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>directDebitId</column-name><column-value><![CDATA[");
        sb.append(getDirectDebitId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisstoreid</column-name><column-value><![CDATA[");
        sb.append(getBisstoreid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextpaymentmethodid</column-name><column-value><![CDATA[");
        sb.append(getBisextpaymentmethodid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextstatusid</column-name><column-value><![CDATA[");
        sb.append(getBisextstatusid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextamount</column-name><column-value><![CDATA[");
        sb.append(getBisextamount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rtbtId</column-name><column-value><![CDATA[");
        sb.append(getRtbtId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentTermId</column-name><column-value><![CDATA[");
        sb.append(getPaymentTermId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unauthorisedOrder</column-name><column-value><![CDATA[");
        sb.append(getUnauthorisedOrder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amsStatus</column-name><column-value><![CDATA[");
        sb.append(getAmsStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addressOverride</column-name><column-value><![CDATA[");
        sb.append(getAddressOverride());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billSameAsShip</column-name><column-value><![CDATA[");
        sb.append(getBillSameAsShip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>masterGuid</column-name><column-value><![CDATA[");
        sb.append(getMasterGuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>saveCreditCard</column-name><column-value><![CDATA[");
        sb.append(getSaveCreditCard());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priceListId</column-name><column-value><![CDATA[");
        sb.append(getPriceListId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisvendor</column-name><column-value><![CDATA[");
        sb.append(getBisvendor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisaddref</column-name><column-value><![CDATA[");
        sb.append(getBisaddref());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisexteffortid</column-name><column-value><![CDATA[");
        sb.append(getBisexteffortid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bisextpaymentreference</column-name><column-value><![CDATA[");
        sb.append(getBisextpaymentreference());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kcpResponseId</column-name><column-value><![CDATA[");
        sb.append(getKcpResponseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>promoOffer</column-name><column-value><![CDATA[");
        sb.append(getPromoOffer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>instCustomer</column-name><column-value><![CDATA[");
        sb.append(getInstCustomer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>partnerGuid</column-name><column-value><![CDATA[");
        sb.append(getPartnerGuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
